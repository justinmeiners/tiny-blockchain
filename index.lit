# Write your own Blockchain


@code_type c .c
@comment_type /* %s */
@add_css main.css

@title Write your Own Proof-of-Work Blockchain

@s

By: [**Justin Meiners**](https://github.com/justinmeiners).

View the final code and other resources in the [GitHub repo](https://github.com/justinmeiners/tiny-blockchain).

@s Introduction

This article will teach you how to write a tiny proof-of-work blockchain,
focusing on the Bitcoin implementation.
I emphasize "proof-of-work" because as we shall see, this is the key innovation that allows Bitcoin
to store information in an "objectively" verifiable way.
I wrote this mainly for programmers who are curious about how cryptocurrency works.
If you are already an enthusist you probably have seen similar articles, although
I believe mine is better focused on the essentials.

This project will be written in C, although it is easy to translate to other languages.
To start, create a new `blockchain.c` file to place the code in the article.
You will also need to include the files [sha-256.h](src/sha-256.h) and [sha-256.c](src/sha-256.c)(1) for
hashes (or use your language's library).

> **Note:** This is a [literate program](https://en.wikipedia.org/wiki/Literate_programming).
> This means you are reading the source code right now!
> The final output was created by ["weaving"](https://github.com/zyedidia/Literate) the blocks of code together.

@s What is a Blockchain?

A blockchain is a data structure for storing an ordered sequence of records (**blocks**) in a tamper-resistant way.
Given some small header information one can verify whether a given record:

1. has been modified
2. belongs in the sequence
3. is in the correct order, relative to the other records

Suppose a news outlet wanted the public to be able to verify
whether a given paper was actually published by them, or whether it was fake.
They could publish each paper on their website, but this is a lot of data
to upload and download for simple verification.
Better yet they could publish the **hash** for each paper which is just
a few bytes.

You are probably familiar with [hashes](https://en.wikipedia.org/wiki/Cryptographic_hash_function), but just to review
a hash is a function which maps large pieces of data to short checksums.
The essential property of a hash is that its *one way*.
It's *easy* to calculate output for an input, *impossible* to know
what input produced a given output, and
*very difficult* to find an alternative piece of data
that produces the same output.

![hash function](img/hash.png)

The list of hashes is a good start, but it only gives us property #1, 
It tells us nothing about how the papers relate to each other.
Are they out of order? Has an extra one been inserted?
A blockchain verifies these kinds of constraints.

Each block is made up of a **header** and **contents**.
The **contents** are just arbitrary data to be stored in the chain.
The **header** contains some info about the block and two hashes:

1. The hash of the contents.

2. The hash of the previous block header.
   This ensures that anyone with the header
   can also check that *no preceding* block has changed.

--- block header
// https://bitcoin.org/en/developer-reference#block-headers
typedef struct
{
    // Length of the data in the block
    uint32_t contents_length;
    // Hash of the block contents.
    // Prevents contents from changing
    // (in Bitcoin this would actually be the "merkle root")
    uint8_t contents_hash[32];
    // prevents previous data from changing
    uint8_t previous_hash[32];

    // pow for later
    @{proof-of-work entries}
} block_header_t;

---

(`32` is then number of bytes in a `sha256` hash.)

You may wonder how the hash of the previous block
can protect against changes much earlier in the chain.
Remember that the previous block also has the hash of the header
*before it*, so any changes would changes to its header would affect
it, and so on in a domino effect.

![blockchain](img/blockchain.gif)

If you use Git version control, you already familiar with this idea.
Each commit is a hash of the state of the code, and also the hash
of the previous commit. This ensures that differing
histories result in different commit hashes.

@s Creating Blocks

Creating a block and adding it to the chain is very straightfoward.
We need some data for contents.
In this project we will be storing blobs of text,
although you could easily store other binary data.

The block also needs a reference to a previous block header (or `NULL` for the "genesis" block.)
We simply hash the contents and the previous block header and 
assign it to the new header.

--- build block
block_header_t build_block(const block_header_t* previous, const char* contents, uint64_t length)
{
    block_header_t header;
    header.contents_length = length;

    if (previous)
    {
        // calculate previous block header hash
        calc_sha_256(header.previous_hash, previous, sizeof(block_header_t));
    }
    else
    {
        // genesis has no previous. just use zeroed hash
        memset(header.previous_hash, 0, sizeof(header.previous_hash))
    }
    
    // add data hash
    calc_sha_256(header.contents_hash, contents, length);

    // mining. disucssed later
    mine_block(&header);
    return header;
}
---

So far we have followed Bitcoin closely. But
just so you know there are a few differences.
Bitcoin of course stores financial transactions as
[UTXOs](https://en.bitcoin.it/wiki/Transaction).
The contents of the block are a bunch of these transactions.
Also, instead of a hash of the whole contents, the [headers](https://bitcoin.org/en/developer-reference#block-headers)
contain a [Merkle Root hash](https://en.bitcoinwiki.org/wiki/Merkle_tree),
which makes it easy to verify transactions are included in a block.
But, this is outside the scope of this project.

@s What is proof-of-work?

If you have been paying attention you may be skeptical about how
useful blockchains are on their own.
Is this really much better than a list of hashes?
To verify a block, you need to have headers, which you must have received from an authority you trust.
A malicious person could give you false headers
you would have no way to tell it wasn't the *real thing*.
They could also take a blockchain you trust, add new headers
to it, and the new ones would look just as valid as old one!

So, blockchains can be useful record keeping devices among trusted groups, but its not clear
at this point how they can keep any kind of contested record, especially a record that stores money.
This is the problem solved by **proof-of-work**. 
It provides a simple rule that *anyone* can use to objectively (2) determine
whether a given blockchain is the one that is the right one. (3)

Instead of allowing blocks to be created freely,
proof-of-work requires that CPU resources be spent,
by solving a problem, in order to create a block.
This process is called **mining**.
Proof that the CPU resources were spent 
is included in the block itself, so that
anyone can verify that the work was actually done.
Hence the term "proof-of-work".

In the Bitcoin network, computers across the world
are constantly trying to produce blocks, but they are
limit by how fast their CPUs are. Once they have spent
the required CPU time, they can produce a block.

This makes the chain verifiable. The valid Bitcoin chain
is always *the longest chain.*
To add a new block, one has to spend CPU resources for just that block.
To add two blocks, twice the amount of work must be done, and 
so on. 

So making a false chain requires spending as much CPU time
as all the computers in the world have 

@s Mining

We add an additional requirement to the chain,
which is that the hash of any block header must be less than
some **target** hash.
In other words `sha256(header) < T`.
By "less than" we mean the usual byte by byte lexographic
comparsion, like alphabetical order.
(For example `0000 0001` is less than `0000 0010`)

### Nonce

Right now the header is fixed, it contains only two immutable fields,
the contents hash, and the previous block hash.
So how can we get a hash below the target?
We add a few additional fields to the header that can be freely modified
called the **nonce** and **timestamp**.

Add the following to the `block_header_t` structure from before.

--- proof-of-work entries

// when this block started being mined
uint32_t timestamp; 

// nonce
// this is adjusted by the miner
// until a suitable hash is created
uint32_t nonce;
---


To make a block header valid, the nonce
is adjusted until the header hashes in the valid range.
This adjustment process is called mining.
There is no rhyme or reason to guessing the nonce.
The miner just tries as many as it can!

Let's write a loop that just tries numbers in order:
(It will be placed in a mining function below.)

--- nonce search
// adjust the nonce
// until the block header is < the target hash
uint8_t block_hash[32];

for (uint32_t i = 0; i < UNIT32_MAX; ++i)
{
    header->nonce = i;
    calc_sha_256(block_hash, header, sizeof(block_header_t));

    if (memcmp(block_hash, target, sizeof(block_hash)) == -1)
        // we found a good hash!
        return;
}
---

As you can imagine, this brute force operation
of adjusting numbers, and hashing again
can take a lot of CPU time!

### Timestamp

It's possible that the miner tries all the numbers that can be stored in a `uint32` (up to `4294967295`)
and never finds a valid hash.
This is what the **timestamp** field is for.
If all numbers have been tried,
the timestamp is reset and it starts again.

Here is the complete mining function:

--- mining
void mine_block(block_header_t* header)
{
    @{target}

    while (1)
    {
        // MINING
        // start of this mining round
        header->timestamp = (uint64_t)time(NULL); 

        @{nonce search}

        // we expired the uint32 without finding a valid hash
        // restart the time, and hope that this time + nonce
        // combo will work
    }

    // this should never happen
    assert(0);
}
---

### Target

The target `T` can be any hash. However, the smaller (in ordering) it is
, the more difficult it is to find a valid hash, because there
are a fewer hashes within the valid range.
This allows Bitcoin to adjust mining difficulty.

--- target
// this controls the difficulty.
// I arbitrarily chose this target
// feel free to try out others.
uint8_t target[32];
memset(target, 0, sizeof(target));
target[2] = 0x1F;
---

@s Producing Blocks

In the real Bitcoin network, miners
are connected together in a peer-to-peer network.
They receive transactions from other client to include in blocks, and
compete with each other to produce blocks.

Our tiny blockchain, we won't have any network or peers,
and will just run on our computer.
However we still want to get a real proof-of-work effect
so that the longer you run your computer
the more secure the chain becomes!

We will do this by accepting text input from stdin, and encoding
each line in a block.
The longer you run your computer, the more secure the chain becomes!

--- input loop
int block_no = 0;
block_header_t previous = genesis;
while (!feof(stdin))
{
    // ask for more data to put
    // in the next block
    char line_buffer[LINE_MAX];
    fgets(line_buffer, LINE_MAX, stdin);  

    printf("creating block %i...\n", block_no);
    uint64_t size = strnlen(line_buffer, LINE_MAX) + 1;
    block_header_t header = build_block(&previous, line_buffer, size);

    // hash the resulting
    // header, for display purposes
    uint8_t test_hash[32];
    calc_sha_256(test_hash, &header, sizeof(block_header_t));

    printf("done. nonce: %i hash: ", header.nonce);
    fprint_hash(stdout, test_hash);
    printf("\n");
    
    previous = header;
    ++block_no;
}

// blocks aren't actually stored
// anywhere. We just keep on building the chain
// from the previous header.
---

@s Genesis Block

To start off our blockchain we need a [genesis block](https://en.bitcoin.it/wiki/Genesis_block).
We will use the same block contents that [Satoshi](https://satoshi.nakamotoinstitute.org)
used in the real Bitcoin chain,
a headline from a 2009 English newspaper.

![the times 2009](img/thetimes.jpg)

> "This was probably intended as proof that the block was created on or after January 3, 2009, as well as a comment on the instability caused by fractional-reserve banking."

--- genesis block
printf("creating genesis block...\n");
char genesis_data[] = "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks";
block_header_t genesis = build_block(NULL, genesis_data, sizeof(genesis_data));
---


@s Utilties

This section contains boring bits of code
not relevant to understanding the actual blockchain.

--- print hashes
void fprint_hash(FILE* f, uint8_t* hash)
{
    fprintf(f, "0x");
    for (int i = 0; i < 32; ++i)
        fprintf(f, "%02x", hash[i]);
}
---



---blockchain.c

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include <memory.h>
#include <assert.h>

#include "sha-256.h"

#define LINE_MAX 2048

@{print hashes}
@{block header}
@{build block}
@{mining}

int main(int argc, const char* argv[])
{
    @{genesis block}

    @{input loop}
    return 1;
}

---

@s Learning More



@s Notes



(1) - Thanks to [Alain Mosnier](https://github.com/amosnier/sha-2)
(2) - 
(3) - "Objectively" is being used a little loosely here. Of course, the objective
      reality is created an alter
(4) https://stackoverflow.com/questions/46192377/why-is-git-not-considered-a-block-chain
